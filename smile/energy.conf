//
// Usage:
// SMILExtract -C thisconfig.conf -I input.wav -csvoutput out.csv
//

[componentInstances:cComponentManager]
; single threaded, better for small inputs
nThreads=4
; no internal dataMemory level output (change to 1,2,3,4 for output)
printLevelStats=0
instance[dataMemory].type=cDataMemory
instance[wave_source].type=cWaveSource
instance[frames10].type=cFramer
instance[energy].type=cEnergy
instance[csv_sink].type=cCsvSink

// wav input reader
[wave_source:cWaveSource]
writer.dmLevel = wave_source
buffersize_sec = 5.0
filename = \cm[inputfile(I){test.wav}:name of input file]
start = \cm[start{0}:audio start position in seconds]
end = \cm[end{-1}:audio end position in seconds, -1 for end of file]
monoMixdown = 1
outFieldName = pcm

// frames of size 10ms and shift 10ms
[frames10:cFramer]
reader.dmLevel=wave_source
writer.dmLevel=frames10
writer.levelconf.growDyn = 0
writer.levelconf.isRb = 1
writer.levelconf.nT = 5
frameMode = fixed
frameSize = 0.010
frameStep = 0.010
frameCenterSpecial = left
noPostEOIprocessing = 1

// squared energy 
[energy:cEnergy]
reader.dmLevel=frames10
writer.dmLevel=energy
rms=0
energy2=1
log=0

// csv output writer
[csv_sink:cCsvSink]
reader.dmLevel = energy
filename=\cm[csvoutput{?}:output CSV file for features allowing zero value, set to a valid filename to enable this output sink, data is appended if file exists]
append=\cm[appendcsv{0}:set to 1 to enable appending to an existing csv parameter summary file, given by the csvoutput option]
frameIndex=0
frameTime=\cm[timestampcsv{0}:set to 1 to show timestamp as second column, default is 0, i.e. to suppress timestamp column]
; instanceName=\cm[instname(N){unknown}:instance name]
errorOnNoOutput = 1
printHeader = \cm[headercsv{0}:set to 1 to include header line with feature names, default is 0, i.e. to suppress header line]
